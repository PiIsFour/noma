{"version":3,"sources":["domain/sentence.ts","domain/word.ts","application/ports/fakeLessonRepo.ts","application/ports/fakeWordRepo.ts","application/useCase/getQuestion.ts","application/services/rngUtil.ts","domain/abstractSentence.ts","infrastructure/ui/carriage/carriage.tsx","infrastructure/ui/engine/engine.tsx","infrastructure/ui/answer/answer.tsx","infrastructure/ui/button/button.tsx","infrastructure/ui/question/question.tsx","infrastructure/ui/learn/learn.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CarriageType","EngineType","carriageHiragana","Object","freeze","ga","word","modifier","type","PartsOfSpeech","renderCarriage","flow","map","c","kanji","separator","reduce","a","b","join","renderEnd","e","renderSentence","sentence","pipe","evolve","parts","end","words","wordRepo","lessonRepo","lessons","fakeLessonRepo","getLessons","addLesson","lesson","newLesson","level","id","length","push","aNoun","conditions","PoS","includes","noun","aVerb","verb","aIAdj","iAdj","randomItemFromArray","rng","array","Math","floor","nouns","hiragana","translation","partsOfSpeech","verbs","randomItem","random","fakeWordRepo","getWord","filter","w","fromNullable","testAll","concatAll","getMonoidAll","fillInCarriages","traverse","OptionApplicative","carriage","some","sequenceS","OptionApply","fillInCarriage","fillInEngine","engine","Carriage","particle","className","Engine","Answer","index","Button","label","onClick","Question","Loading","Error","Ask","question","this","transitionTo","text","action","Review","nextQuestion","lookUpQuestion","chain","template","calculateConcreteSentence","Learn","useState","stage","setStage","fold","useEffect","render","style","marginTop","controls","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d5b8888e.chunk.js","sourcesContent":["import { flow, pipe } from 'fp-ts/function'\nimport { map, reduce } from 'fp-ts/lib/Array'\nimport { evolve } from 'fp-ts/lib/struct'\nimport { Word } from './word'\n\nexport enum CarriageType {\n\tga = 'ga',\n}\n\nexport const carriageHiragana = Object.freeze<Record<CarriageType, string>>({\n\tga: '„Åå',\n})\n\nexport interface Carriage<T = Word> {\n\tword: T,\n\ttype: CarriageType,\n\tmodifier?: Sentence<T>,\n}\n\nexport const ga = <T = Word>(word: T, modifier?: Sentence<T>): Carriage<T> => ({ word, type: CarriageType.ga, modifier })\n\nexport enum EngineType {\n\tverb = 'verb',\n\tiAdj = 'iAdj',\n}\n\nexport interface Engine<T = Word> {\n\tword: T,\n\ttype: EngineType,\n}\n\nexport const verb = <T = Word>(word: T): Engine<T> => ({ word, type: EngineType.verb })\nexport const iAdj = <T = Word>(word: T): Engine<T> => ({ word, type: EngineType.iAdj })\n\nexport interface Sentence<T = Word> {\n\tparts: Carriage<T>[],\n\tend: Engine<T>,\n}\n\nconst join = (separator = '') => reduce<string, string>('', (a, b) => `${ a }${ separator }${ b }`)\nconst renderCarriage = flow(\n\tmap((c: Carriage) => `${ c.word.kanji }${ carriageHiragana[c.type] }`),\n\tjoin(),\n)\nconst renderEnd = (e: Engine<Word>): string => e.word.kanji\n\nexport const renderSentence = (sentence: Sentence): string => {\n\tconst { parts, end } = pipe(\n\t\tsentence,\n\t\tevolve({\n\t\t\tparts: renderCarriage,\n\t\t\tend: renderEnd,\n\t\t}),\n\t)\n\treturn `${ parts }${ end }`\n}\n","export enum PartsOfSpeech {\n\tnoun = 'noun',\n\tverb = 'verb',\n\tiAdj = 'iAdj',\n}\n\nexport interface Word {\n\thiragana: string;\n\tkanji: string;\n\ttranslation: string;\n\tpartsOfSpeech: PartsOfSpeech[];\n}\n","import { AbstractWord } from '../../domain/abstractSentence'\nimport { ga, iAdj, verb } from '../../domain/sentence'\nimport { PartsOfSpeech } from '../../domain/word'\nimport { Lesson, LessonRepo } from './lessonRepo'\n\nconst lessons: Lesson[] = []\n\nexport const fakeLessonRepo: LessonRepo = {\n\tgetLessons: () => lessons,\n}\n\nexport const createFakeLessonRepo = (lessons: Lesson[]): LessonRepo => ({\n\tgetLessons: () => lessons,\n})\n\nconst addLesson = (lesson: Omit<Lesson, 'id' | 'level'>): Lesson => {\n\tconst newLesson = {\n\t\t...lesson,\n\t\tlevel: 0,\n\t\tid: lessons.length + 1,\n\t}\n\tlessons.push(newLesson)\n\treturn newLesson\n}\n\nconst aNoun: AbstractWord = {\n\tconditions: [PoS => PoS.includes(PartsOfSpeech.noun)],\n}\n\nconst aVerb: AbstractWord = {\n\tconditions: [PoS => PoS.includes(PartsOfSpeech.verb)],\n}\n\nconst aIAdj: AbstractWord = {\n\tconditions: [PoS => PoS.includes(PartsOfSpeech.iAdj)],\n}\n\nexport const NounGaVerbLesson = addLesson({\n\ttype: 'StandAloneLesson',\n\tsentence: {\n\t\tparts: [ga(aNoun)],\n\t\tend: verb(aVerb),\n\t},\n})\n\nexport const NounGaIAdjLesson = addLesson({\n\ttype: 'StandAloneLesson',\n\tsentence: {\n\t\tparts: [ga(aNoun)],\n\t\tend: iAdj(aIAdj),\n\t},\n})\n","import { pipe } from 'fp-ts/function'\nimport { fromNullable } from 'fp-ts/Option'\nimport { PartsOfSpeech, Word } from '../../domain/word'\nimport { randomItemFromArray } from '../services/rngUtil'\nimport { WordRepo } from './wordsRepo'\n\nexport const sakura: Word = {\n\thiragana: '„Åï„Åè„Çâ',\n\tkanji: '„Åï„Åè„Çâ',\n\ttranslation: 'sakura',\n\tpartsOfSpeech: [PartsOfSpeech.noun],\n}\nexport const shop: Word = {\n\thiragana: '„Åø„Åõ',\n\tkanji: 'Â∫ó',\n\ttranslation: 'shop',\n\tpartsOfSpeech: [PartsOfSpeech.noun],\n}\nexport const movie: Word = {\n\thiragana: '„Åà„ÅÑ„Åå',\n\tkanji: 'Êò†Áîª',\n\ttranslation: 'movie',\n\tpartsOfSpeech: [PartsOfSpeech.noun],\n}\nexport const bathroom: Word = {\n\thiragana: '„Å®„ÅÑ„Çå',\n\tkanji: '„Éà„Ç§„É¨',\n\ttranslation: 'bathroom',\n\tpartsOfSpeech: [PartsOfSpeech.noun],\n}\nconst nouns = [sakura, shop, movie, bathroom]\n\nexport const walk: Word = {\n\thiragana: '„ÅÇ„Çã„Åè',\n\tkanji: 'Ê≠©„Åè',\n\ttranslation: 'walk',\n\tpartsOfSpeech: [PartsOfSpeech.verb],\n}\nexport const eat: Word = {\n\thiragana: '„Åü„Åπ„Çã',\n\tkanji: 'È£ü„Åπ„Çã',\n\ttranslation: 'eat',\n\tpartsOfSpeech: [PartsOfSpeech.verb],\n}\nexport const see: Word = {\n\thiragana: '„Åø„Çã',\n\tkanji: 'Ë¶ã„Çã',\n\ttranslation: 'see',\n\tpartsOfSpeech: [PartsOfSpeech.verb],\n}\nexport const say: Word = {\n\thiragana: '„ÅÑ„ÅÜ',\n\tkanji: 'Ë®Ä„ÅÜ',\n\ttranslation: 'say',\n\tpartsOfSpeech: [PartsOfSpeech.verb],\n}\nconst verbs = [walk, eat, see, say]\n\nexport const cute: Word = {\n\thiragana: '„Åã„Çè„ÅÑ„ÅÑ',\n\tkanji: 'ÂèØÊÑõ„ÅÑ',\n\ttranslation: 'cute',\n\tpartsOfSpeech: [PartsOfSpeech.iAdj],\n}\nexport const near: Word = {\n\thiragana: '„Å°„Åã„ÅÑ',\n\tkanji: 'Ëøë„ÅÑ',\n\ttranslation: 'near',\n\tpartsOfSpeech: [PartsOfSpeech.iAdj],\n}\nexport const big: Word = {\n\thiragana: '„Åä„Åä„Åç„ÅÑ',\n\tkanji: 'Â§ß„Åç„ÅÑ',\n\ttranslation: 'big',\n\tpartsOfSpeech: [PartsOfSpeech.iAdj],\n}\nexport const difficult: Word = {\n\thiragana: '„ÇÄ„Åö„Åã„Åó„ÅÑ',\n\tkanji: 'Èõ£„Åó„ÅÑ',\n\ttranslation: 'difficult',\n\tpartsOfSpeech: [PartsOfSpeech.iAdj],\n}\nconst iAdj = [cute, near, big, difficult]\n\nconst randomItem = randomItemFromArray(Math.random)\n\nexport const createFakeWordRepo = (words: Word[]): WordRepo => ({\n\t// getWord: filter => fromNullable(words.find(w => filter(w.partsOfSpeech))),\n\tgetWord: filter => pipe(\n\t\twords.filter(w => filter(w.partsOfSpeech)),\n\t\trandomItem,\n\t\tfromNullable,\n\t),\n})\n\nexport const fakeWordRepo = createFakeWordRepo([...nouns, ...verbs, ...iAdj])\n","import { pipe } from 'fp-ts/function'\nimport { fromNullable, map, chain, Option } from 'fp-ts/Option'\nimport { renderSentence, Sentence } from '../../domain/sentence'\nimport { LessonRepo } from '../ports/lessonRepo'\nimport { WordRepo } from '../ports/wordsRepo'\nimport { calculateConcreteSentence } from '../../domain/abstractSentence'\nimport { randomItemFromArray } from '../services/rngUtil'\n\nexport interface Question {\n\tkanji: string,\n\tsentence: Sentence\n}\n\nconst randomItem = randomItemFromArray(Math.random)\n\nexport const getQuestion = (wordRepo: WordRepo, lessonRepo: LessonRepo) => (): Option<Question> => {\n\treturn pipe(\n\t\t// TODO: select lesson in some balanced way\n\t\tlessonRepo.getLessons(),\n\t\trandomItem,\n\t\tfromNullable,\n\t\tmap((lesson) => lesson.sentence),\n\t\tchain(calculateConcreteSentence(wordRepo)),\n\t\tmap(sentence => ({\n\t\t\tkanji: renderSentence(sentence),\n\t\t\tsentence,\n\t\t})),\n\t)\n}\n","import { RngSource } from '../ports/rngSource'\n\nexport const randomItemFromArray = (rng: RngSource) => <T>(array: T[]): T | undefined => {\n\tconst index = Math.floor(rng() * array.length)\n\treturn array[index]\n}\n","import { traverse } from 'fp-ts/Array'\nimport { pipe } from 'fp-ts/function'\nimport { Option, Applicative as OptionApplicative, Apply as OptionApply, some } from 'fp-ts/Option'\nimport { concatAll } from 'fp-ts/Monoid'\nimport { getMonoidAll } from 'fp-ts/Predicate'\nimport { WordRepo } from '../application/ports/wordsRepo'\nimport { Carriage, Engine, Sentence } from './sentence'\nimport { PartsOfSpeech, Word } from './word'\nimport { sequenceS } from 'fp-ts/Apply'\nimport { evolve } from 'fp-ts/struct'\n\nexport interface AbstractWord {\n\tconditions: ((p: PartsOfSpeech[]) => boolean)[]\n}\n\nexport type AbstractSentence = Sentence<AbstractWord>\n\nconst testAll = concatAll(getMonoidAll<PartsOfSpeech[]>())\nconst getWord = (wordRepo: WordRepo) => (word: AbstractWord): Option<Word> =>\n\twordRepo.getWord(testAll(word.conditions))\nconst fillInCarriage = (wordRepo: WordRepo) => (carriage: Carriage<AbstractWord>): Option<Carriage> => pipe(\n\t{\n\t\tword: getWord(wordRepo)(carriage.word),\n\t\ttype: some(carriage.type),\n\t\t// TODO: add modifier sentence here\n\t},\n\tsequenceS(OptionApply),\n)\nconst fillInCarriages = (wordRepo: WordRepo) => traverse(OptionApplicative)(fillInCarriage(wordRepo))\nconst fillInEngine = (wordRepo: WordRepo) => (engine: Engine<AbstractWord>): Option<Engine> => pipe(\n\t{\n\t\tword: getWord(wordRepo)(engine.word),\n\t\ttype: some(engine.type),\n\t},\n\tsequenceS(OptionApply),\n)\n\nexport const calculateConcreteSentence = (wordRepo: WordRepo) => (template: AbstractSentence): Option<Sentence> => {\n\treturn pipe(\n\t\ttemplate,\n\t\tevolve({\n\t\t\tparts: fillInCarriages(wordRepo),\n\t\t\tend: fillInEngine(wordRepo),\n\t\t}),\n\t\tsequenceS(OptionApply),\n\t)\n}\n","import React from 'react'\nimport { Carriage as CarriageType, carriageHiragana } from '../../../domain/sentence'\nimport './carriage.css'\n\ninterface Props {\n\tcarriage: CarriageType\n}\n\nexport const Carriage = ({ carriage }: Props): JSX.Element => {\n\tconst { type, word } = carriage\n\tconst kanji = word.kanji\n\tconst particle = carriageHiragana[type]\n\treturn <div className={['carriage', `carriage-${ type }`].join(' ')}>\n\t\t{kanji}\n\t\t<span className=\"particle\">{particle}</span>\n\t</div>\n}\n","import React from 'react'\nimport './engine.css'\nimport { Engine as EngineType } from '../../../domain/sentence'\n\ninterface Props {\n\tengine: EngineType\n}\n\nexport const Engine = ({ engine }: Props): JSX.Element => {\n\tconst { type, word } = engine\n\tconst kanji = word.kanji\n\treturn <div className={['engine', `engine-${ type }`].join(' ')}>\n\t\t{kanji}\n\t</div>\n}\n","import React from 'react'\nimport { Question } from '../../../application/useCase/getQuestion'\nimport { Carriage } from '../carriage/carriage'\nimport { Engine } from '../engine/engine'\nimport './answer.css'\n\nexport const Answer = ({ sentence }: Question): JSX.Element => {\n\treturn <div className=\"answer\">\n\t\t{sentence.parts.map((carriage, index) => <Carriage key={index} carriage={carriage} />)}\n\t\t<Engine engine={sentence.end} />\n\t</div>\n}\n","import React from 'react'\nimport './button.css'\n\ninterface Props {\n\tlabel: string;\n\tonClick?: () => void;\n}\n\nexport const Button = ({\n\tlabel,\n\tonClick,\n}: Props): JSX.Element => {\n\treturn <button\n\t\ttype=\"button\"\n\t\tclassName=\"button\"\n\t\tonClick={onClick}\n\t>\n\t\t{label}\n\t</button>\n}\n","import React from 'react'\nimport './question.css'\n\ninterface Props {\n\tkanji: string\n}\n\nexport const Question = ({ kanji }: Props): JSX.Element => {\n\treturn <div className=\"question\">\n\t\t{kanji}\n\t</div>\n}\n","import { flow } from 'fp-ts/lib/function'\nimport { fold } from 'fp-ts/lib/Option'\nimport React, { useEffect, useState } from 'react'\nimport { fakeLessonRepo } from '../../../application/ports/fakeLessonRepo'\nimport { fakeWordRepo } from '../../../application/ports/fakeWordRepo'\nimport { getQuestion, Question as QuestionType } from '../../../application/useCase/getQuestion'\nimport { Answer } from '../answer/answer'\nimport { Button } from '../button/button'\nimport { Question } from '../question/question'\n\ninterface StateParams {\n\ttransitionTo: (stage: Stage) => void\n\tnextQuestion: () => void\n}\n\ninterface Controls {\n\ttext: string\n\taction: () => void\n}\n\nclass Loading {\n\trender(): JSX.Element{\n\t\treturn <div>loading next lesson</div>\n\t}\n\n\tcontrols(): Controls[]{\n\t\treturn []\n\t}\n}\n\nclass Error {\n\trender(): JSX.Element{\n\t\treturn <div>Error</div>\n\t}\n\n\tcontrols(): Controls[]{\n\t\treturn []\n\t}\n}\n\nclass Ask {\n\tconstructor(private question: QuestionType){}\n\trender(): JSX.Element{\n\t\treturn <Question kanji={this.question.kanji} />\n\t}\n\n\tcontrols({ transitionTo }: StateParams): Controls[]{\n\t\treturn [\n\t\t\t{\n\t\t\t\ttext: 'show',\n\t\t\t\taction: () => transitionTo(new Review(this.question)),\n\t\t\t},\n\t\t]\n\t}\n}\n\nclass Review {\n\tconstructor(private question: QuestionType){}\n\trender(): JSX.Element{\n\t\tconst { kanji, sentence } = this.question\n\t\treturn <Answer kanji={kanji} sentence={sentence} />\n\t}\n\n\tcontrols({ nextQuestion }: StateParams): Controls[]{\n\t\treturn [\n\t\t\t{\n\t\t\t\ttext: 'next',\n\t\t\t\taction: nextQuestion,\n\t\t\t},\n\t\t]\n\t}\n}\n\ntype Stage = Loading | Error | Ask | Review\n\nconst lookUpQuestion = getQuestion(fakeWordRepo, fakeLessonRepo)\n\nexport const Learn = (): JSX.Element => {\n\tconst [stage, setStage] = useState<Stage>(new Loading())\n\n\tconst nextQuestion = flow(\n\t\tlookUpQuestion,\n\t\tfold(\n\t\t\t() => setStage(new Error()),\n\t\t\tquestion => setStage(new Ask(question)),\n\t\t),\n\t)\n\n\tuseEffect(nextQuestion, [])\n\n\treturn <>\n\t\t{stage.render()}\n\t\t<div style={{\n\t\t\tmarginTop: '2rem',\n\t\t}}>\n\t\t\t{stage.controls({\n\t\t\t\ttransitionTo: setStage,\n\t\t\t\tnextQuestion,\n\t\t\t}).map(({ text, action }, index) =>\n\t\t\t\t<Button key={index} label={text} onClick={action} />,\n\t\t\t)}\n\t\t</div>\n\t</>\n}\n","import React from 'react'\nimport './App.css'\n\nimport { Learn } from './infrastructure/ui/learn/learn'\n\nconst App = (): JSX.Element => {\n\treturn <div className='App'>\n\t\t<Learn />\n\t</div>\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n\tif(onPerfEntry && onPerfEntry instanceof Function){\n\t\timport('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\tgetCLS(onPerfEntry)\n\t\t\tgetFID(onPerfEntry)\n\t\t\tgetFCP(onPerfEntry)\n\t\t\tgetLCP(onPerfEntry)\n\t\t\tgetTTFB(onPerfEntry)\n\t\t})\n\t}\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}